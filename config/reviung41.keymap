/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
// | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
//                         | ALT | LWR | SPC | RSE  | GUI |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T    &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LSHFT &kp A &kp S &kp D &kp F &kp G    &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B    &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT RET
                  &kp LALT  &lt 1 ESC &kp SPACE &lt 2 DEL &kp LGUI 
                        >;
                };


                lower_layer {
// -----------------------------------------------------------------------------------------
// | ESC |  1  |  2   |  3    |  4    |  5  |   |  6  |  7   |  8   |  9   |  0  | DEL |
// |     |     | HOME | PG_DN | PG_UP | END |   | LFT | DWN  | UP   | RGT  |     |     |
// |     |     | LBRC | LBKT  | LPAR  |     |   |     | RPAR | RBKT | RBRC |     |     |
//                       |     |     |  SPC  | ADJ  |     |
                        bindings = <
   &kp ESC &kp N1    &kp N2    &kp N3    &kp N4    &kp N5        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &trans
   &trans  &trans    &kp HOME  &kp PG_DN &kp PG_UP &kp END       &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &trans    &trans
   &trans  &trans    &kp LBRC  &kp LBKT  &kp LPAR  &trans        &trans    &kp RPAR  &kp RBKT  &kp RBRC  &trans    &trans
                                &trans      &trans       &kp SPACE      &mo 3      &trans
                        >;
                };

                raise_layer {
// ----------------------------------------------------------------------------------
// | ESC |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | DEL |
// |     |  F1 | F2  | F3  | F4  |  F5 |   | F6  |  -  |  =  |  `  | "|" |     |
// |     |  F7 | F8  | F9  | F10 | F11 |   | F12 |  _  |  +  |  ~  |  \  |     |
//                      |     |  ADJ |  SPC  |     |     |
                        bindings = <
   &kp ESC &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT      &kp CARET &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans
   &trans  &kp F1   &kp F2 &kp F3   &kp F4   &kp F5         &kp F6    &kp MINUS &kp EQUAL &kp GRAVE &kp PIPE  &trans
   &trans  &kp F7   &kp F8 &kp F9   &kp F10  &kp F11        &kp F12   &kp UNDER &kp PLUS  &kp TILDE &kp BSLH  &trans
                            &trans      &mo 3       &kp SPACE        &trans       &trans
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ | RGB SPD+ | RGB TOG |      | BT 0  |  BT1  | BT2     | BT3  | BT4 | BT5 | BT CLR |
// | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI+ | RGB SPD- | PWR TOG |      | PREV  | PAUSE | PLAY    | NEXT |     |     |        |
// |          |          |          |          |          |         |      | RESET | BOOT  | OUT TOG |      |     |     |        | 
//                                                     |     |     |  SPACE  |     |     |
                        bindings = <
   &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &rgb_ug RGB_SPI &rgb_ug RGB_TOG      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
   &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &rgb_ug RGB_SPD &ext_power EP_TOG    &kp K_PREV   &kp K_STOP2  &kp K_PP     &kp K_NEXT   &none        &none
   &none           &none           &none           &none           &none           &none                &reset       &bootloader  &out OUT_TOG &none        &none        &none
                                                                     &trans      &trans         &kp SPACE     &trans      &trans
                        >;
                };
        };
};
